{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// source: {{.SourceName}}

import { Database, QueryExecResult } from "@stephen/sql.js";

{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}
{{range .Queries}}
{{if $.OutputQuery .SourceName}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}};

{{if .Arg.EmitStruct}}
export type {{.Arg.Type}} = { {{- range .Arg.UniqueFields}}
  {{.Name}}: {{.Type}};
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
export type {{.Ret.Type}} = { {{- range .Ret.Struct.Fields}}
  {{.Name}}: {{.Type}};
  {{- end}}
}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
export function {{.MethodName}}(db: Database, {{.Arg.Pair}}): {{.Ret.DefineType}} | null {
  const result = db.exec({{.ConstantName}}, [id])
  if (!Array.isArray(result) || result.length !== 1) {
    throw new Error("expected exec() to return a query result")
  }

  const queryResult = result[0];
  if (!Array.isArray(queryResult.values) || queryResult.values.length !== 1) {
    return null;
  }

  const columns = queryResult.columns;
  const row = queryResult.values[0];
  const rv: Partial<{{.Ret.DefineType}}> = {};
  for (const [i, col] of columns.entries()) {
    rv[col] = row[i]
  }
  return rv;
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
export function {{.MethodName}}(db: Database, {{.Arg.Pair}}): {{.Ret.DefineType}}[] {
  const result = db.exec({{.ConstantName}}, [{{.Arg.Params}}])
  if (!Array.isArray(result) || result.length !== 1) {
    throw new Error("expected exec() to return a query result")
  }

  const queryResult = result[0];
  const rvs: {{.Ret.DefineType}}[] = [];

  for (const row of queryResult.values) {
  const columns = queryResult.columns;
    const rv: Partial<{{.Ret.DefineType}}> = {};
    const row = queryResult.values[0];
    for (const [i, col] of columns.entries()) {
      rv[col] = row[i]
    }
    rvs.push(row);
  }
  return rvs;
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
export function {{.MethodName}}(db: Database, {{.Arg.Pair}}): void {
 db.exec({{.ConstantName}}, [{{.Arg.Params}}])
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
export function {{.MethodName}}(db: Database, {{.Arg.Pair}}): number {
  const result = db.exec({{.ConstantName}}, [{{.Arg.Params}}])
  return result[0].values.length;
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
export function {{.MethodName}}(db: Database, {{.Arg.Pair}}): QueryExecResult {
  return db.exec({{.ConstantName}}, [{{.Arg.Params}}])
}
{{end}}

{{end}}
{{end}}
{{end}}
